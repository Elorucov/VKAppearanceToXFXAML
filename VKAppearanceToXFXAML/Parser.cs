using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace VKAppearanceToXFXAML {
    public class Parser {
        private static string GetHeader() {
            DateTime dt = DateTime.Now;
            int y = dt.Year;
            string a = dt.Month > 9 ? $"{dt.Month}" : $"0{dt.Month}";
            string d = dt.Day > 9 ? $"{dt.Day}" : $"0{dt.Day}";
            return $"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<!-- This resource dictionary file generated by VKAppearanceToXFXAML tool by ELOR on {y}/{a}/{d}. -->";
        }

        private static string JSONKeyToXAMLStyle(string key, string suffix = "") {
            string[] ss = key.Split('_');
            string res = "VK";
            foreach (string s in ss) {
                res += $"{s[0].ToString().ToUpper()}{s.Substring(1)}";
            }
            return res + suffix;
        }

        private static readonly string RepositoryUri = "https://raw.githubusercontent.com/VKCOM/Appearance/master/main.valette/";
        private static readonly string PaletteUri = RepositoryUri + "palette.json";
        private static readonly string PaletteMessagesUri = RepositoryUri + "palette_messages.json";
        private static readonly string SchemeUri = RepositoryUri + "scheme.json";
        private static readonly string SchemeMessagesUri = RepositoryUri + "scheme_messages.json";

        public static async Task<Dictionary<string, string>> DoItAsync(IProgress<string> progress, string className) {
            Dictionary<string, string> XamlFiles = new Dictionary<string, string>();

            try {
                progress.Report("Getting palette...");
                string palettejson = await GetFileFromWebAsync(PaletteUri);
                progress.Report("Getting messages palette...");
                string mpalettejson = await GetFileFromWebAsync(PaletteMessagesUri);
                progress.Report("Getting schemes...");
                string schemejson = await GetFileFromWebAsync(SchemeUri);
                progress.Report("Getting messages schemes...");
                string mschemejson = await GetFileFromWebAsync(SchemeMessagesUri);

                // Palette
                progress.Report("Parsing palette...");
                JObject pj = JObject.Parse(palettejson);
                Dictionary<string, string> palettes = ParsePalette(progress, pj);

                // Palette for messages
                progress.Report("Parsing messages palette...");
                JObject mpj = JObject.Parse(mpalettejson);
                Dictionary<string, string> mpalettes = ParsePalette(progress, mpj);

                // Schemes
                progress.Report("Parsing scheme...");
                JObject schemes = JObject.Parse(schemejson);
                Dictionary<string, string> SchemeLight = new Dictionary<string, string>();
                Dictionary<string, string> SchemeDark = new Dictionary<string, string>();
                ParseSchemeXamarin(schemes, palettes, out SchemeLight, out SchemeDark);

                progress.Report("Parsing messages scheme...");
                JObject mschemes = JObject.Parse(mschemejson);
                Dictionary<string, string> MsgSchemeLight = new Dictionary<string, string>();
                Dictionary<string, string> MsgSchemeDark = new Dictionary<string, string>();
                ParseSchemeXamarin(mschemes, mpalettes, out MsgSchemeLight, out MsgSchemeDark);

                XamlFiles.Add("SchemeLight.xaml", ConvertToXaml(progress, SchemeLight, className, "SchemeLight"));
                XamlFiles.Add("SchemeDark.xaml", ConvertToXaml(progress, SchemeDark, className, "SchemeDark"));
                XamlFiles.Add("SchemeMessagesLight.xaml", ConvertToXaml(progress, MsgSchemeLight, className, "SchemeMessagesLight"));
                XamlFiles.Add("SchemeMessagesDark.xaml", ConvertToXaml(progress, MsgSchemeDark, className, "SchemeMessagesDark"));

                return XamlFiles;
            } catch (Exception ex) {
                if (progress != null) progress.Report($"Exception 0x{ex.HResult.ToString("x8")}: {ex.Message}");
                return null;
            }
        }

        private static Dictionary<string, string> ParsePalette(IProgress<string> progress, JObject palette) {
            if (progress != null) progress.Report($"Total colors: {palette.Values().Count()}.");
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            foreach (var pkv in palette) {
                dictionary.Add(pkv.Key, pkv.Value.Value<string>());
            }
            return dictionary;
        }

        private static void ParseSchemeXamarin(JObject schemes, Dictionary<string, string> palette, out Dictionary<string, string> light, out Dictionary<string, string> dark) {
            JObject ds = null;
            JObject ls = null;

            foreach (var skv in schemes) {
                if (skv.Key == "space_gray" && skv.Value.Value<string>("appearance") == "dark") ds = skv.Value.Value<JObject>("colors");
                if (skv.Key == "bright_light" && skv.Value.Value<string>("appearance") == "light") ls = skv.Value.Value<JObject>("colors");
            }

            light = ParseScheme(ls, palette);
            dark = ParseScheme(ds, palette);
        }

        private static Dictionary<string, string> ParseScheme(JObject jscheme, Dictionary<string, string> palette) {
            Dictionary<string, string> scheme = new Dictionary<string, string>();


            foreach (var sk in jscheme) {
                string color = palette[sk.Value.Value<string>("color_identifier")];
                double opacity = sk.Value.Value<double>("alpha_multiplier");
                string hex = AlphaToHex(opacity);

                if (opacity > 0) color = color.Insert(1, hex);
                scheme.Add(JSONKeyToXAMLStyle(sk.Key, "Color"), color);
            }

            return scheme;
        }

        private static string AlphaToHex(double opacity) {
            double d = 256 * opacity;
            byte b = Convert.ToByte(d);
            return b.ToString("X2");
        }

        private static string ConvertToXaml(IProgress<string> progress, Dictionary<string, string> scheme, string className, string name) {
            progress.Report($"Converting to XAML: {name}. Total colors in scheme: {scheme.Count}.");
            string xaml = GetHeader() + "\n";
            xaml += $"<!-- {name} -->\n";
            xaml += $"<ResourceDictionary xmlns=\"http://xamarin.com/schemas/2014/forms\"\n";
            xaml += $"    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n";
            xaml += $"    x:Class=\"{className}.{name}\">\n\n";

            foreach (var color in scheme) {
                xaml += $"    <Color x:Key=\"{color.Key}\">{color.Value}</Color>\n";
            }

            xaml += $"</ResourceDictionary>\n";
            return xaml;
        }

        private static async Task<string> GetFileFromWebAsync(string url) {
            using (HttpClient hc = new HttpClient()) {
                HttpResponseMessage resp = await hc.GetAsync(url);
                resp.EnsureSuccessStatusCode();
                return await resp.Content.ReadAsStringAsync();
            }
        }
    }
}
